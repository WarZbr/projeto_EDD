// Estevão Smith e Bruno Gabriel

/*Pontos Fortes e Fracos de uma Lista Ordenada

Pontos Fortes:

Eficiência na busca: uma lista ordenada permite que a busca por um elemento seja realizada de forma eficiente, pois os elementos estão organizados de forma sequencial. Isso permite que a busca seja realizada em tempo O(log n) no melhor caso, utilizando algoritmos como a busca binária.
Inserção e remoção ordenada: a lista ordenada garante que os elementos sejam inseridos e removidos de forma ordenada, o que é útil em aplicações que exigem uma ordem específica.

Pontos Fracos:

Inserção e remoção lenta: a inserção e remoção de elementos em uma lista ordenada podem ser lentas, pois é necessário reorganizar os elementos adjacentes para manter a ordem. Isso pode levar a um tempo de execução de O(n) no pior caso.
Uso de memória: uma lista ordenada pode exigir mais memória do que uma lista não ordenada, pois é necessário armazenar informações adicionais sobre a ordem dos elementos.

*/

/* A estrategia para o aumento de memoria foi atualizar o insert() para dobrar o tamanho da lista
*sempre que necessario melhorando a eficiencia e evitando fazer varios realocs
*/

#include <stdio.h>
#include <stdlib.h>
#include "ordered_list.h"

t_ordered_list* create_ordered_list(int max) {
    t_ordered_list* list = (t_ordered_list*) malloc(sizeof(t_ordered_list));
    list->max = max;
    list->n = 0;
    list->items = (int*) malloc(sizeof(int) * max);
    return list;
}

int size(t_ordered_list* list){
    return list->n;
}

int is_empty(t_ordered_list* list) {
    return list->n == 0;
}

int is_full(t_ordered_list* list) {
    return list->n >= list->max;
}

void destroy(t_ordered_list* list) {
    free(list->items);
    free(list);
}

void clear(t_ordered_list* list) {
    list->n = 0;
}

int insert(t_ordered_list* list, int value) {
    if (!list) return 0;
    if (is_full(list)) { 
        int new_max = list->max * 2; 
        int* new_items = (int*) realloc(list->items, new_max * sizeof(int)); 
        if (!new_items) return 0; 
        list->items = new_items; 
        list->max = new_max; 
    }
    int i = list->n - 1;
    while (i >= 0 && list->items[i] > value) {
        list->items[i + 1] = list->items[i];
        i--;
    }
    list->items[i + 1] = value;
    list->n++;
    return 1;
}

int search(t_ordered_list* list, int elem) {
    for (int i = 0; i < list->n; i++) {
        if (list->items[i] == elem) {
            return i;
        }
    }
    return -1;
}

void print_ordered_list(t_ordered_list *list) {
    for (int i = 0; i < list->n; i++) {
        printf("%d\t", list->items[i]);
    }
    printf("\n");
}    

int remove_by_index(t_ordered_list* list, int index) {
    if (!list || index < 0 || index >= list->n) return 0;
    for (int i = index; i < list->n - 1; i++) {
        list->items[i] = list->items[i + 1];
    }
    list->n--;
    return 1;
}                 

int remove_by_value(t_ordered_list* list, int value) {
    int index = search(list, value);
    if (index != -1) {
        return remove_by_index(list, index);
    } else {
        return 0;
    }
}

int remove_end(t_ordered_list* list) {
    if (!is_empty(list)) {
        list->n--;
        return 1;
    }
    return 0;
}

t_ordered_list* merge(t_ordered_list* list1, t_ordered_list* list2) {
    t_ordered_list* list3 = create_ordered_list(list1->n + list2->n);
    
    int i = 0, j = 0, k = 0;
    
    while (i < list1->n && j < list2->n) {
        if (list1->items[i] <= list2->items[j]) {
            list3->items[k++] = list1->items[i++];
        } else {
            list3->items[k++] = list2->items[j++];
        }
    }
    
    while (i < list1->n) {
        list3->items[k++] = list1->items[i++];
    }
    
    while (j < list2->n) {
        list3->items[k++] = list2->items[j++];
    }
    
    list3->n = k;
    
    return list3;
}
